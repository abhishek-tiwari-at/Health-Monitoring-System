[2025-05-03 09:10:53,385] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, name=log4j:logger=kafka.controller (kafka.controller)
[2025-05-03 09:11:07,825] INFO [ControllerEventThread controllerId=0] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2025-05-03 09:11:07,860] INFO [Controller id=0] 0 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2025-05-03 09:11:07,865] INFO [Controller id=0] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2025-05-03 09:11:07,906] INFO [Controller id=0] Registering handlers (kafka.controller.KafkaController)
[2025-05-03 09:11:07,909] INFO [Controller id=0] Deleting log dir event notifications (kafka.controller.KafkaController)
[2025-05-03 09:11:07,910] INFO [Controller id=0] Deleting isr change notifications (kafka.controller.KafkaController)
[2025-05-03 09:11:07,913] INFO [Controller id=0] Initializing controller context (kafka.controller.KafkaController)
[2025-05-03 09:11:07,921] INFO [Controller id=0] Initialized broker epochs cache: HashMap(0 -> 25) (kafka.controller.KafkaController)
[2025-05-03 09:11:07,925] DEBUG [Controller id=0] Register BrokerModifications handler for Set(0) (kafka.controller.KafkaController)
[2025-05-03 09:11:07,930] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2025-05-03 09:11:07,934] INFO [RequestSendThread controllerId=0] Starting (kafka.controller.RequestSendThread)
[2025-05-03 09:11:07,935] INFO [Controller id=0] Currently active brokers in the cluster: Set(0) (kafka.controller.KafkaController)
[2025-05-03 09:11:07,935] INFO [Controller id=0] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2025-05-03 09:11:07,936] INFO [Controller id=0] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2025-05-03 09:11:07,936] INFO [Controller id=0] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2025-05-03 09:11:07,940] INFO [Controller id=0] List of topics to be deleted:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,940] INFO [Controller id=0] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,940] INFO [Controller id=0] Initializing topic deletion manager (kafka.controller.KafkaController)
[2025-05-03 09:11:07,941] INFO [Topic Deletion Manager 0] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2025-05-03 09:11:07,942] INFO [Controller id=0] Sending update metadata request (kafka.controller.KafkaController)
[2025-05-03 09:11:07,951] INFO [ReplicaStateMachine controllerId=0] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2025-05-03 09:11:07,951] INFO [ReplicaStateMachine controllerId=0] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2025-05-03 09:11:07,953] INFO [ReplicaStateMachine controllerId=0] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2025-05-03 09:11:07,954] DEBUG [ReplicaStateMachine controllerId=0] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2025-05-03 09:11:07,954] INFO [PartitionStateMachine controllerId=0] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2025-05-03 09:11:07,955] INFO [PartitionStateMachine controllerId=0] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2025-05-03 09:11:07,958] DEBUG [PartitionStateMachine controllerId=0] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2025-05-03 09:11:07,958] INFO [Controller id=0] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2025-05-03 09:11:07,958] INFO [RequestSendThread controllerId=0] Controller 0 connected to ubuntu:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-03 09:11:07,963] INFO [Controller id=0] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,963] INFO [Controller id=0] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,963] INFO [Controller id=0] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,963] INFO [Controller id=0] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2025-05-03 09:11:07,965] INFO [Controller id=0] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2025-05-03 09:11:07,975] INFO [Controller id=0] Starting the controller scheduler (kafka.controller.KafkaController)
[2025-05-03 09:11:12,976] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:11:12,984] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:12:54,803] INFO [Controller id=0] New topics: [Set(heart_topic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(heart_topic,Some(8aKQHQskQR2QJdkxaBha_g),Map(heart_topic-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:12:54,803] INFO [Controller id=0] New partition creation callback for heart_topic-0 (kafka.controller.KafkaController)
[2025-05-03 09:12:55,037] INFO [Controller id=0] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(ioL8QOwvR1CaBOXBBVt2pw),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:12:55,037] INFO [Controller id=0] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
[2025-05-03 09:14:06,027] INFO [Controller id=0] New topics: [Set(cardio_topic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(cardio_topic,Some(zV5dwfBvRUme-a1vRPaufg),Map(cardio_topic-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:14:06,028] INFO [Controller id=0] New partition creation callback for cardio_topic-0 (kafka.controller.KafkaController)
[2025-05-03 09:16:12,985] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:16:12,985] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:16:12,986] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:16:12,987] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:17:26,573] INFO [Controller id=0] New topics: [Set(heart_topic_alert)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(heart_topic_alert,Some(7fmkaxJdRmyK4pduWBfsLg),Map(heart_topic_alert-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:17:26,573] INFO [Controller id=0] New partition creation callback for heart_topic_alert-0 (kafka.controller.KafkaController)
[2025-05-03 09:19:45,485] INFO [Controller id=0] New topics: [HashSet(stroke_topic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(stroke_topic,Some(DSrRcyWbTuih_BEMR2IAlA),Map(stroke_topic-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:19:45,486] INFO [Controller id=0] New partition creation callback for stroke_topic-0 (kafka.controller.KafkaController)
[2025-05-03 09:21:12,987] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:21:12,987] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:21:12,989] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:21:12,989] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:26:12,990] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:26:12,990] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:26:12,991] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:26:12,991] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:31:12,991] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:31:12,991] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:31:12,993] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:31:12,993] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:31:47,874] INFO [Controller id=0] New topics: [HashSet(cardio_topic_alert)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(cardio_topic_alert,Some(y0bnGJlBTkqDb7efcVi_Vw),Map(cardio_topic_alert-0 -> ReplicaAssignment(replicas=0, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2025-05-03 09:31:47,875] INFO [Controller id=0] New partition creation callback for cardio_topic_alert-0 (kafka.controller.KafkaController)
[2025-05-03 09:31:47,886] INFO [RequestSendThread controllerId=0] Controller 0 connected to ubuntu:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2025-05-03 09:36:12,993] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:36:12,993] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:36:12,995] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:36:12,995] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:41:12,995] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:41:12,996] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:41:12,996] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:41:12,996] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:46:12,997] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:46:12,997] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:46:12,997] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:46:12,997] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:51:12,998] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:51:12,998] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:51:12,998] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:51:12,998] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2025-05-03 09:56:12,999] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2025-05-03 09:56:12,999] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2025-05-03 09:56:12,999] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 HashMap() (kafka.controller.KafkaController)
[2025-05-03 09:56:12,999] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
